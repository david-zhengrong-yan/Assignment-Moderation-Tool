name: CI

on:
  push:
    branches: ["*"]       # run on any branch push
  pull_request:
    branches: ["*"]       # run on any branch PR

jobs:
  python-lint:
    runs-on: ubuntu-latest
    outputs:
      failed: ${{ steps.check-fail.outputs.failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pylint
        working-directory: backend
        run: |
          pylint $(git ls-files '*.py') | tee pylint-report.txt || true

      - name: Run black (format check only)
        working-directory: backend
        run: black --check . | tee black-report.txt || true

      - name: Check pylint score
        id: check-fail
        working-directory: backend
        run: |
          # Extract the pylint score from last line of report
          SCORE=$(tail -n 1 pylint-report.txt | grep -oP '(?<=rated at )[-+]?[0-9]*\.?[0-9]+')
          echo "Pylint score: $SCORE"

          # Fail if score <= 2
          awk -v score="$SCORE" 'BEGIN { if (score <= 2) exit 1; else exit 0 }'
          if [ $? -ne 0 ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          else
            echo "failed=false" >> $GITHUB_OUTPUT


  react-lint:
    runs-on: ubuntu-latest
    outputs:
      failed: ${{ steps.check-fail.outputs.failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Node dependencies
        working-directory: frontend
        run: npm install

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint | tee eslint-report.txt || true

      - name: Check if ESLint failed
        id: check-fail
        run: |
          if [ $? -ne 0 ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          else
            echo "failed=false" >> $GITHUB_OUTPUT

  backend-test:
    runs-on: ubuntu-latest
    outputs:
      failed: ${{ steps.check-fail.outputs.failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django Tests
        working-directory: backend
        run: python manage.py test --verbosity=2 || true

      - name: Check if tests failed
        id: check-fail
        run: |
          if [ $? -ne 0 ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          else
            echo "failed=false" >> $GITHUB_OUTPUT

  summary:
    runs-on: ubuntu-latest
    needs: [python-lint, react-lint, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print Python lint summary
        working-directory: backend
        run: |
          echo "## üêç Python Lint Report"

          if [ -f pylint-report.txt ]; then
            cat pylint-report.txt
            # Extract and show final pylint score
            SCORE=$(tail -n 1 pylint-report.txt | grep -oP '(?<=rated at )[-+]?[0-9]*\.?[0-9]+')
            echo ""
            echo "‚úÖ Pylint final score: $SCORE/10"
            if (( $(echo "$SCORE <= 2" | bc -l) )); then
              echo "‚ö†Ô∏è Pylint score is too low (<=2)"
            else
              echo "üéâ Pylint score is acceptable (>2)"
            fi
          else
            echo "No pylint report found"
          fi

          echo "## üñ§ Black Format Report"
          cat black-report.txt || echo "No black report found"

      - name: Print React lint summary
        run: |
          echo "## ‚öõÔ∏è React ESLint Report"
          cat frontend/eslint-report.txt || echo "No ESLint report found"

      - name: Print Django test summary
        run: |
          echo "## üß™ Django Test Report"
          echo "Check Actions log for detailed test output."

      - name: Fail PR if any job failed
        if: needs.python-lint.outputs.failed == 'true' || needs.react-lint.outputs.failed == 'true' || needs.backend-test.outputs.failed == 'true'
        run: exit 1
